
    Small_calculator - версия 3.0.0
    Работа начата 24.04.2023, закончена - 6.12.2023.

    Автор: Калинушкин Владимир, ya-vladimir-93@yandex.ru
    _______________________________________________

    Новое:
        1) Из функционала:
            - 1) создан ввод-вывод из файла
            - 2) реализована тонкая настройка программы
            - 3) теперь ведется лог ошибок
            - 4) добавлена функция clear для очистки экрана

        2) Из технического:

            - 1) типы лексем выведены в одно "псевдо-перечисление" (макроc BETTER_ENUM, Libraries/better-enums, смотри https://github.com/aantron/better-enums/tree/master)
            - 2) создан отдельный класс Main_exception для обработки исключений
            - 3) он же выводит данные об ошибке в лог-файл
            - 4) создан класс Mathematic_result для вывода результата
            - 5) все "стандартные" заголовки убраны - оставлены только необходимые (несколько "общих функций", взятых из личных библиотек помещены в Libraries/other_functions.hpp)

            - 6) следующая иерархия файлов:
                - а) Small_calculator.cpp, Small_calculator.h, constantes.h, global_static_objects.h - для "ядра" программы, стоит отметить, что порядок включения заголовков, констант и глобальных объектов важен - многие классы и логика программы зависят один от другого (об этом ниже)
                - б) далее папки All_calculation_modes, Libraries, Custom_classes, Main_menu
                - в) в заключение - директория Manuals. Принято решение о создании справки как отдельного файла для более удобного её редактирования, причём вкупе с тем, что в классе Settings появилось поле с именем файла настроек есть возможность сделать вывод справки мультиязычным

            - 7) для потенциально долгой обработки вводимого файла создан индикатор задержки (находится в All_calculation_modes/enable_mathematic_mode.cpp (и ...h))
            - 8) переделан класс Settings - теперь сама настройка производится в подменю главного меню (масло маслянное =))) ), а Settings хранит и возвращает параметры, с возможностью, конечно, их изменить

            - 9) для корректной работы исключений (правильной инициализации объекта исключения) при инициализации токена поле type устанавливается налом, на логику работы это никак не влияет: токен после создания почти сразу получает реальные значения, а в классе Main_exception токен - чатсь объекта (для того, чтобы по возможности получить и передать пользователю информацию о проблемном месте в выражении (конечно, чтобы найти ошибку в введённом выражении =)) )), но, если при инициализации объекта исключения не был передан токен (это не всегда нужно), в выводе сообщения не нужно выводить "случайные" значения "встроенного" токена, достаточно ограничиться строкой "no_token" в логе, а в консоли вообще ничего не выводить

            - 10) Объект класса TokenStream должен инициализироваться с адресом Settings. Этого можно было бы не делать, оставив вызов методов Setting_са внутри класса TokenStream, но для исключения возможности неправильного включения заголовков и "забытого" файла настроек я принял решение сделать это явно. К тому же, теперь Token_ы получаются не только из консоли, но и из файлов (теоретически, при данной модели возможно получать их "откуда угодно"), а не хотелось очень "загромождать" алгоритмы вычисления дополнительными ссылками, да ещё и пришлось бы переделывать каждый "геттер" в них. Это и безопаснее: мы получаем только Stream::get() (Token), и совершенно не касаемся реализации ввода

            - 11) Немного модифицирована функция очистки потока Stream::clear (void). Теперь она очищает консоль или буфер файла в зависимости от настроенного инструмента ввода
            - 12) Метод Token::get() (Token) перенесён в TokenStream, метод TokenStream::read_token(istream &is) (Token)
    _______________________________________________

    Программа "Small_calculator" представляет собой простой консольный калькулятор.
    Стандартными средствами консоли производятся вычисления - простые арифметические действия.
    Идея программы взята из учебников Строуструпа по языку прогаммирования C++, и переработана (Бьярне Строуструп, "Программирование: принципы и практика использования C++", 2009 год).
    Основным посылом программы является разделение постоянного потока входных данных на лексемы и непрерывная их обработка.

    Логика программы следующая:

        Третий уровень:
            Второй уровень + Второй уровень
            Второй уровень - Второй уровень
            Второй уровень
        Второй уровень:
            Первый уровень * Первый уровень
            Первый уровень / Первый уровень
            Первый уровень
        Первый уровень:
            Первичное выражение ^ Первичное выражение (возведение в степень)
        Первичное Выражение:
            + Первичное Выражение
            - Первичное Выражение
            ( Первичное Выражение )
            Число
            Переменная
            Константа
            Функция
        Функция:
            [Имя функции] Первичное Выражение
            [Имя функции] ( Первичное Выражение, Первичное выражение )
        Переменная:
            [Имя, Число]
        Константа:
            [Имя, Число]

        Объявление переменной:
            Ключевое слово [ var ],  Новое имя, '=', Первичное Выражение
        Изменение переменной:
            'Имя Переменной', '=', Первичное Выражение

        Ключевые слова:
            [ Имя ]
        Новое имя: Любое Слово, не использовавшееся ранее

    _______________________________________________

    Пояснения:
        -1) Непосредственно ввод из файла производится потоком TokenStream, это еще одна причина, почему для TokenStream нужна ссылка на объект Stream
        -2) Режим ввода (из файла или нет) выбирается в главном меню в отдельной функции, прредназначенной для забора данных из файла
        -3) вывод лога ошибок отделён от обработки и вывода исключений.

            В mamin_menu.cpp есть функция errors_handler для обработки ошибок. Она в настоящем положении создает и вызывает файл, свойства которого определены в Settings, а в Main_exception есть метод put_to_file, выводящий лог ф настроенный файл.

            Данное решение более логично, чем реализовывать вывод файла в Main_exception, потому что вывод файла можно вывести по-разному. И в данном случае имя файла объявлено в настройках, и обработка файла произведена в mamin_menu.cpp. Это решение более гибкое. Хотя вывод производится априори в файл, его имя и контроль вывода находятся на более высоком уровне.

            Main_exception контролирует только необходимость вывода (указывается при создании исключения). Если не указано иначе, исключение будет записываться (архивироваться). Как правило, из-за особенностей вызова исключений, не нужно записывать конец считывания файла. Окончание считывания файла обрабатываетия как исключение, но записывать его нет необходимости. Впрочем, остается возможность это сделать или по-особому обработать конец файла.


